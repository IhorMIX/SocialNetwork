// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialNetwork.DAL;

#nullable disable

namespace SocialNetwork.DAL.Migrations
{
    [DbContext(typeof(SocialNetworkDbContext))]
    partial class SocialNetworkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatMemberRole", b =>
                {
                    b.Property<int>("ChatMembersId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("ChatMembersId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ChatMemberRole");
                });

            modelBuilder.Entity("GroupMemberRoleGroup", b =>
                {
                    b.Property<int>("GroupMembersId")
                        .HasColumnType("int");

                    b.Property<int>("RoleGroupId")
                        .HasColumnType("int");

                    b.HasKey("GroupMembersId", "RoleGroupId");

                    b.HasIndex("RoleGroupId");

                    b.ToTable("GroupMemberRoleGroup");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.AuthorizationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoginType")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AuthorizationInfo");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.BannedUserList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("BannedUserLists");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.BaseFileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseFileEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.BasePostEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Posts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BasePostEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.BaseRequestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Requests");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseRequestEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.BlackList", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BannedUserId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BannedUserId");

                    b.HasIndex("BannedUserId");

                    b.ToTable("BlackLists");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.ChatMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMembers");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.CommentPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToReplyCommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("ToReplyCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentPost");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Friendship", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCreator")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.LikePost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("LikePost");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToReplyMessageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SenderId");

                    b.HasIndex("ToReplyMessageId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.MessageReadStatus", b =>
                {
                    b.Property<int>("ChatMemberId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatMemberId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageReadStatuses");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.NotificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InitiatorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Notifications");

                    b.HasDiscriminator<string>("Discriminator").HasValue("NotificationEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MessageId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("RoleColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.RoleChatAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatAccess")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleChatAccess");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.RoleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("RoleColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("RoleGroups");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.RoleGroupAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupAccess")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGroupAccess");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorizationInfoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OnlineStatus")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.FileInMessage", b =>
                {
                    b.HasBaseType("SocialNetwork.DAL.Entity.BaseFileEntity");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasIndex("MessageId");

                    b.HasDiscriminator().HasValue("FileInMessage");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.FileInPost", b =>
                {
                    b.HasBaseType("SocialNetwork.DAL.Entity.BaseFileEntity");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasIndex("PostId");

                    b.HasDiscriminator().HasValue("FileInPost");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.UserPost", b =>
                {
                    b.HasBaseType("SocialNetwork.DAL.Entity.BasePostEntity");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("UserPost");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.FriendRequest", b =>
                {
                    b.HasBaseType("SocialNetwork.DAL.Entity.BaseRequestEntity");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int");

                    b.HasIndex("ToUserId");

                    b.HasDiscriminator().HasValue("FriendRequest");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.GroupRequest", b =>
                {
                    b.HasBaseType("SocialNetwork.DAL.Entity.BaseRequestEntity");

                    b.Property<int>("ToGroupId")
                        .HasColumnType("int");

                    b.HasIndex("ToGroupId");

                    b.HasDiscriminator().HasValue("GroupRequest");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.ChatNotification", b =>
                {
                    b.HasBaseType("SocialNetwork.DAL.Entity.NotificationEntity");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.HasIndex("ChatId");

                    b.HasDiscriminator().HasValue("ChatNotification");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.CommentNotification", b =>
                {
                    b.HasBaseType("SocialNetwork.DAL.Entity.NotificationEntity");

                    b.Property<int>("CommentPostId")
                        .HasColumnType("int");

                    b.HasIndex("CommentPostId");

                    b.HasDiscriminator().HasValue("CommentNotification");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.FriendRequestNotification", b =>
                {
                    b.HasBaseType("SocialNetwork.DAL.Entity.NotificationEntity");

                    b.Property<int>("FriendRequestId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("FriendRequestNotification");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.GroupRequestNotification", b =>
                {
                    b.HasBaseType("SocialNetwork.DAL.Entity.NotificationEntity");

                    b.Property<int>("GroupRequestId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("GroupRequestNotification");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.LikeNotification", b =>
                {
                    b.HasBaseType("SocialNetwork.DAL.Entity.NotificationEntity");

                    b.Property<int>("LikePostId")
                        .HasColumnType("int");

                    b.HasIndex("LikePostId");

                    b.HasDiscriminator().HasValue("LikeNotification");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.MessageNotification", b =>
                {
                    b.HasBaseType("SocialNetwork.DAL.Entity.ChatNotification");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasIndex("MessageId");

                    b.HasDiscriminator().HasValue("MessageNotification");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.ReactionNotification", b =>
                {
                    b.HasBaseType("SocialNetwork.DAL.Entity.ChatNotification");

                    b.Property<int>("ReactionId")
                        .HasColumnType("int");

                    b.HasIndex("ReactionId")
                        .IsUnique()
                        .HasFilter("[ReactionId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ReactionNotification");
                });

            modelBuilder.Entity("ChatMemberRole", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.ChatMember", null)
                        .WithMany()
                        .HasForeignKey("ChatMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DAL.Entity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupMemberRoleGroup", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.GroupMember", null)
                        .WithMany()
                        .HasForeignKey("GroupMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DAL.Entity.RoleGroup", null)
                        .WithMany()
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.AuthorizationInfo", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.User", "User")
                        .WithOne("AuthorizationInfo")
                        .HasForeignKey("SocialNetwork.DAL.Entity.AuthorizationInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.BannedUserList", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.Group", "Group")
                        .WithMany("BannedUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DAL.Entity.User", "User")
                        .WithMany("BansByGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.BaseRequestEntity", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.User", "Sender")
                        .WithMany("Requests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.BlackList", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.User", "BannedUser")
                        .WithMany()
                        .HasForeignKey("BannedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DAL.Entity.User", "User")
                        .WithMany("BlackLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BannedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.ChatMember", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.Chat", "Chat")
                        .WithMany("ChatMembers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DAL.Entity.User", "User")
                        .WithMany("ChatMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.CommentPost", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.BasePostEntity", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DAL.Entity.CommentPost", "ToReplyComment")
                        .WithMany()
                        .HasForeignKey("ToReplyCommentId");

                    b.HasOne("SocialNetwork.DAL.Entity.User", "User")
                        .WithMany("CommentedPost")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("ToReplyComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Friendship", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.User", "FriendUser")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DAL.Entity.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FriendUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.GroupMember", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DAL.Entity.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.LikePost", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.BasePostEntity", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DAL.Entity.User", "User")
                        .WithMany("LikedPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Message", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DAL.Entity.User", "Creator")
                        .WithMany("CreatedMessages")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DAL.Entity.ChatMember", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DAL.Entity.Message", "ToReplyMessage")
                        .WithMany()
                        .HasForeignKey("ToReplyMessageId");

                    b.Navigation("Chat");

                    b.Navigation("Creator");

                    b.Navigation("Sender");

                    b.Navigation("ToReplyMessage");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.MessageReadStatus", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.ChatMember", "ChatMember")
                        .WithMany()
                        .HasForeignKey("ChatMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DAL.Entity.Message", "Message")
                        .WithMany("MessageReadStatuses")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMember");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.NotificationEntity", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.User", "Initiator")
                        .WithMany("Notifications")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Profile", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("SocialNetwork.DAL.Entity.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Reaction", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.ChatMember", "Author")
                        .WithMany("Reactions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SocialNetwork.DAL.Entity.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Role", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.Chat", "Chat")
                        .WithMany("Roles")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.RoleChatAccess", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.Role", "Role")
                        .WithMany("RoleAccesses")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.RoleGroup", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.Group", "Group")
                        .WithMany("RoleGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.RoleGroupAccess", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.RoleGroup", "RoleGroup")
                        .WithMany("RoleAccesses")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("RoleGroup");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.FileInMessage", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.Message", "Message")
                        .WithMany("Files")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.FileInPost", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.BasePostEntity", "Post")
                        .WithMany("Files")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.UserPost", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.FriendRequest", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.GroupRequest", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.Group", "ToGroup")
                        .WithMany()
                        .HasForeignKey("ToGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ToGroup");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.ChatNotification", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.CommentNotification", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.CommentPost", "CommentPost")
                        .WithMany()
                        .HasForeignKey("CommentPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentPost");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.LikeNotification", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.LikePost", "LikePost")
                        .WithMany()
                        .HasForeignKey("LikePostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LikePost");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.MessageNotification", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.ReactionNotification", b =>
                {
                    b.HasOne("SocialNetwork.DAL.Entity.Reaction", "Reaction")
                        .WithOne("Notification")
                        .HasForeignKey("SocialNetwork.DAL.Entity.ReactionNotification", "ReactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Reaction");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.BasePostEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Chat", b =>
                {
                    b.Navigation("ChatMembers");

                    b.Navigation("Messages");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.ChatMember", b =>
                {
                    b.Navigation("MessagesSent");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Group", b =>
                {
                    b.Navigation("BannedUsers");

                    b.Navigation("GroupMembers");

                    b.Navigation("RoleGroups");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Message", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("MessageReadStatuses");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Reaction", b =>
                {
                    b.Navigation("Notification");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.Role", b =>
                {
                    b.Navigation("RoleAccesses");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.RoleGroup", b =>
                {
                    b.Navigation("RoleAccesses");
                });

            modelBuilder.Entity("SocialNetwork.DAL.Entity.User", b =>
                {
                    b.Navigation("AuthorizationInfo");

                    b.Navigation("BansByGroups");

                    b.Navigation("BlackLists");

                    b.Navigation("ChatMembers");

                    b.Navigation("CommentedPost");

                    b.Navigation("CreatedMessages");

                    b.Navigation("Friends");

                    b.Navigation("GroupMembers");

                    b.Navigation("LikedPosts");

                    b.Navigation("Notifications");

                    b.Navigation("Posts");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
